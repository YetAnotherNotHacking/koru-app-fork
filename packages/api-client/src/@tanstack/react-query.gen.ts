// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getAllUsers,
  createUser,
  deleteUser,
  getUser,
  updateUser,
  getItems,
  createItem,
  getItem,
  getCategories,
  searchItems,
  root,
  healthCheck,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  GetAllUsersData,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  DeleteUserData,
  DeleteUserError,
  GetUserData,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  GetItemsData,
  CreateItemData,
  CreateItemError,
  CreateItemResponse,
  GetItemData,
  GetCategoriesData,
  SearchItemsData,
  RootData,
  HealthCheckData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getAllUsersQueryKey = (options?: Options<GetAllUsersData>) =>
  createQueryKey("getAllUsers", options);

/**
 * Get All Users
 * Get all users
 */
export const getAllUsersOptions = (options?: Options<GetAllUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAllUsersQueryKey(options),
  });
};

export const createUserQueryKey = (options: Options<CreateUserData>) =>
  createQueryKey("createUser", options);

/**
 * Create User
 * Create a new user
 */
export const createUserOptions = (options: Options<CreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createUserQueryKey(options),
  });
};

/**
 * Create User
 * Create a new user
 */
export const createUserMutation = (
  options?: Partial<Options<CreateUserData>>
): UseMutationOptions<
  CreateUserResponse,
  CreateUserError,
  Options<CreateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateUserResponse,
    CreateUserError,
    Options<CreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete User
 * Delete a user
 */
export const deleteUserMutation = (
  options?: Partial<Options<DeleteUserData>>
): UseMutationOptions<unknown, DeleteUserError, Options<DeleteUserData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteUserError,
    Options<DeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUserQueryKey = (options: Options<GetUserData>) =>
  createQueryKey("getUser", options);

/**
 * Get User
 * Get a specific user by ID
 */
export const getUserOptions = (options: Options<GetUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserQueryKey(options),
  });
};

/**
 * Update User
 * Update an existing user
 */
export const updateUserMutation = (
  options?: Partial<Options<UpdateUserData>>
): UseMutationOptions<
  UpdateUserResponse,
  UpdateUserError,
  Options<UpdateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateUserResponse,
    UpdateUserError,
    Options<UpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemsQueryKey = (options?: Options<GetItemsData>) =>
  createQueryKey("getItems", options);

/**
 * Get Items
 * Get all items with optional filtering
 */
export const getItemsOptions = (options?: Options<GetItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsQueryKey(options),
  });
};

export const createItemQueryKey = (options: Options<CreateItemData>) =>
  createQueryKey("createItem", options);

/**
 * Create Item
 * Create a new item
 */
export const createItemOptions = (options: Options<CreateItemData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createItemQueryKey(options),
  });
};

/**
 * Create Item
 * Create a new item
 */
export const createItemMutation = (
  options?: Partial<Options<CreateItemData>>
): UseMutationOptions<
  CreateItemResponse,
  CreateItemError,
  Options<CreateItemData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateItemResponse,
    CreateItemError,
    Options<CreateItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemQueryKey = (options: Options<GetItemData>) =>
  createQueryKey("getItem", options);

/**
 * Get Item
 * Get a specific item by ID
 */
export const getItemOptions = (options: Options<GetItemData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemQueryKey(options),
  });
};

export const getCategoriesQueryKey = (options?: Options<GetCategoriesData>) =>
  createQueryKey("getCategories", options);

/**
 * Get Categories
 * Get all unique categories
 */
export const getCategoriesOptions = (options?: Options<GetCategoriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCategories({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCategoriesQueryKey(options),
  });
};

export const searchItemsQueryKey = (options: Options<SearchItemsData>) =>
  createQueryKey("searchItems", options);

/**
 * Search Items
 * Search items by name or description
 */
export const searchItemsOptions = (options: Options<SearchItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchItemsQueryKey(options),
  });
};

export const rootQueryKey = (options?: Options<RootData>) =>
  createQueryKey("root", options);

/**
 * Root
 * Root endpoint - returns basic API info
 */
export const rootOptions = (options?: Options<RootData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await root({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootQueryKey(options),
  });
};

export const healthCheckQueryKey = (options?: Options<HealthCheckData>) =>
  createQueryKey("healthCheck", options);

/**
 * Health Check
 * Health check endpoint for monitoring
 */
export const healthCheckOptions = (options?: Options<HealthCheckData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckQueryKey(options),
  });
};
