// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  GetAllUsersData,
  GetAllUsersResponse,
  CreateUserData,
  CreateUserResponse,
  CreateUserError,
  DeleteUserData,
  DeleteUserError,
  GetUserData,
  GetUserResponse,
  GetUserError,
  UpdateUserData,
  UpdateUserResponse,
  UpdateUserError,
  GetItemsData,
  GetItemsResponse,
  GetItemsError,
  CreateItemData,
  CreateItemResponse,
  CreateItemError,
  GetItemData,
  GetItemResponse,
  GetItemError,
  GetCategoriesData,
  SearchItemsData,
  SearchItemsError,
  RootData,
  HealthCheckData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get All Users
 * Get all users
 */
export const getAllUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllUsersResponse,
    unknown,
    ThrowOnError
  >({
    url: "/users/",
    ...options,
  });
};

/**
 * Create User
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    url: "/users/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete User
 * Delete a user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteUserError,
    ThrowOnError
  >({
    url: "/users/{user_id}",
    ...options,
  });
};

/**
 * Get User
 * Get a specific user by ID
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserResponse,
    GetUserError,
    ThrowOnError
  >({
    url: "/users/{user_id}",
    ...options,
  });
};

/**
 * Update User
 * Update an existing user
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    url: "/users/{user_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Items
 * Get all items with optional filtering
 */
export const getItems = <ThrowOnError extends boolean = false>(
  options?: Options<GetItemsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemsResponse,
    GetItemsError,
    ThrowOnError
  >({
    url: "/items/",
    ...options,
  });
};

/**
 * Create Item
 * Create a new item
 */
export const createItem = <ThrowOnError extends boolean = false>(
  options: Options<CreateItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateItemResponse,
    CreateItemError,
    ThrowOnError
  >({
    url: "/items/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Item
 * Get a specific item by ID
 */
export const getItem = <ThrowOnError extends boolean = false>(
  options: Options<GetItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetItemResponse,
    GetItemError,
    ThrowOnError
  >({
    url: "/items/{item_id}",
    ...options,
  });
};

/**
 * Get Categories
 * Get all unique categories
 */
export const getCategories = <ThrowOnError extends boolean = false>(
  options?: Options<GetCategoriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/items/categories/list",
      ...options,
    }
  );
};

/**
 * Search Items
 * Search items by name or description
 */
export const searchItems = <ThrowOnError extends boolean = false>(
  options: Options<SearchItemsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    SearchItemsError,
    ThrowOnError
  >({
    url: "/items/search/{search_term}",
    ...options,
  });
};

/**
 * Root
 * Root endpoint - returns basic API info
 */
export const root = <ThrowOnError extends boolean = false>(
  options?: Options<RootData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/",
      ...options,
    }
  );
};

/**
 * Health Check
 * Health check endpoint for monitoring
 */
export const healthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/health",
      ...options,
    }
  );
};
